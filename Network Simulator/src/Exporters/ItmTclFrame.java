package Exporters;

import Components.Link;
import Components.Node;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

/**
 * Lightweight exporter that converts a network (Nodes + Links) built with
 * Components.Node and Components.Link into a simple TCL file usable by ns
 * or the user's existing processing pipeline.
 *
 * This class intentionally has no Swing/UI code. Use it by passing your
 * Node/Link collections and calling writeTcl(...).
 */
public class ItmTclFrame {
    private final Collection<Node> nodes;
    private final Collection<Link> links;

    public ItmTclFrame(Collection<Node> nodes, Collection<Link> links) {
        this.nodes = nodes;
        this.links = links;
    }

    public void writeTcl(File outFile, int simTimeSec, String bandwidth, String delay) throws IOException {
        if (bandwidth == null || bandwidth.isEmpty())
            bandwidth = "100.0Mb";
        if (delay == null || delay.isEmpty())
            delay = "1ms";

        // map Node.id -> tcl variable name (n<ID>)
        Map<Long, String> nodeVar = new HashMap<>();
        PrintStream out = null;
        try {
            out = new PrintStream(new BufferedOutputStream(new FileOutputStream(outFile)));

            out.println("# Generated by ItmTclFrame exporter");
            out.println("# Nodes: " + nodes.size() + "  Links: " + links.size());
            out.println();
            out.println("# ===== Initialization =====");
            out.println("set ns [new Simulator]");
            out.println();

            out.println("# ===== Create nodes =====");
            for (Node n : nodes) {
                String var = "n" + n.id; // e.g. n1, n2, ...
                nodeVar.put(n.id, var);
                out.println("set " + var + " [$ns node]");
            }
            out.println();

            out.println("# ===== Create links =====");
            for (Link l : links) {
                String v1 = nodeVar.get(l.node1.id);
                String v2 = nodeVar.get(l.node2.id);
                if (v1 == null || v2 == null) {
                    // skip links that reference unknown nodes
                    out.println("# Skipping link " + l.id + " (unknown node)");
                    continue;
                }
                out.println("$ns duplex-link $" + v1 + " $" + v2 + " " + bandwidth + " " + delay + " DropTail");
            }
            out.println();

            out.println("# ===== Optional: stop and run =====");
            out.println("# stop all applications and halt the simulator at t=" + simTimeSec + "s");
            out.println("$ns at " + simTimeSec + ".0 \"$ns halt\"");
            out.println("$ns run");

            out.flush();
        } finally {
            if (out != null)
                out.close();
        }
    }

    /**
     * Static convenience method.
     */
    public static void writeTcl(File outFile, Collection<Node> nodes, Collection<Link> links, int simTimeSec,
            String bandwidth, String delay) throws IOException {
        new ItmTclFrame(nodes, links).writeTcl(outFile, simTimeSec, bandwidth, delay);
    }
}
